import harvest
import requests
import json

github_username = ''
github_password = ''
harvest.load_github()

GITHUB_API_URL = "https://api.github.com/search/repositories?q='Mycroft'in:readme+archived:false&per_page=100"

request = requests.get("https://api.github.com/search/issues?q=repo:MycroftAI/mycroft-skills+state:open&sort=created&order=asc").text
MARKET_PR = json.loads(request)

request = requests.get('https://raw.githubusercontent.com/MycroftAI/mycroft-skills-data/18.08/skill-metadata.json').text
MARKET = json.loads(request)



request = requests.get("https://api.github.com/search/issues?q=repo:MycroftAI/mycroft-skills+state:open+type:pr&sort=created&order=asc").text
MARKET_PR = json.loads(request)

request = requests.get('https://raw.githubusercontent.com/MycroftAI/mycroft-skills-data/18.08/skill-metadata.json').text
MARKET = json.loads(request)


def check_market(skill_name, user, skill_url):
    for item in MARKET:
        if MARKET[item]["repo"] == skill_url:
            return ["In Market"]
    for pull_request in MARKET_PR['items']:
        if pull_request['body'].find(skill_url) >= 0:
            labels = ['PR-' + str(pull_request['number'])]
            for label in pull_request['labels']:
                labels.append(label['name'])
            return labels
    return ["Not in Market"]


def check_if_skill(repo_url, branch):
    init_py = None
    init_py_txt = None
    init_py = repo_url.replace(
        'https://github.com/', 'https://raw.githubusercontent.com/') + '/' + branch + '/__init__.py'
    init_py_txt = requests.get(init_py).text
    if init_py_txt.find("def create_skill():") is not -1 or init_py_txt.find("MycroftSkill") is not -1:
        return True
    else:
        return False



skill_auhtor = {}
skills = []

count = 0
page = 1
while page <= 10:
    request = requests.get(GITHUB_API_URL + "&page=" + str(page))
    result = json.loads(request.text)
    for repo in result["items"]:
        branch = repo["default_branch"]
        url = repo["html_url"]
        name = repo["name"]
        readme_url = url.replace(
            'https://github.com/', 'https://raw.githubusercontent.com/') + '/' + branch + '/README.md'
        readme_txt = requests.get(readme_url).text

        sections = harvest.extract_sections(readme_txt)

        if check_if_skill(url, branch):
            count = count + 1
            print(count)
            title_info = harvest.find_title_info(sections, repo["name"])
            licens = 'Unknow license'
            if repo['license'] is not None:
                license = repo['license']
            icon_info = harvest.find_icon(sections, repo["html_url"], branch)
            if icon_info[0]:
                icon = str(icon_info[0])
            else:
                if icon_info[1]:
                    icon = "https://raw.githack.com/FortAwesome/Font-Awesome/master/svgs/solid/" + \
                        str(icon_info[1]) + '.svg'
                else:
                    icon = "https://raw.githack.com/FortAwesome/Font-Awesome/master/svgs/solid/times.svg"
            about = ''
            if sections.get('About'):
                about = sections['About']
            category = ["None"]
            category = [cat.replace('*', '') for cat in sorted(
                (harvest.find_section('Category', sections, 0.9) or '').split())],
            examples = ''
            examples = [harvest.parse_example(i)
                        for i in harvest.find_examples(sections)]
            credits = ''
            credits = harvest.make_credits((harvest.find_section(
                'Credits', sections, 0.9) or harvest.caps(repo['owner']['login'])))
            platform = ''
            platform = (harvest.find_section('Supported Devices', sections, 0.9) or 'all').split(),
            tags = ''
            tags = (harvest.find_section('Tags', sections) or '').replace('#', '').split()

            skill_id = repo['name'] + '.' + repo['owner']['login']
            market_status = ['Not in Market']
            market_status = check_market(repo['name'], repo['owner']['login'], repo["html_url"])
            create_date = repo['created_at'].split('T')[0]
            update_date = repo['updated_at'].split('T')[0]

            skills.append({
                'skill_id': skill_id,
                'name': repo['name'],
                'title': title_info[0],
                'teaser': title_info[1],
                'owner': repo['owner']['login'],
                'owner_avatar': repo['owner']['avatar_url'],
                'repo_url': repo["html_url"],
                'license': license,
                'icon': icon,
                'about': about,
                'category': category,
                'examples': examples,
                'credits': credits,
                'market_status': market_status,
                'create_date': create_date,
                'update_date': update_date})

            number_of_skills = 1
            skills_in_market = 0
            if skill_auhtor.get(repo['owner']['login']):
                number_of_skills = skill_auhtor[repo['owner']
                                                ['login']]['number_of_skills'] + 1
                if market_status is ['In Market']:
                    skills_in_market = skill_auhtor[repo['owner']
                                                    ['login']]['skills_in_market'] + 1

            auhtor = {'avatar': repo['owner']['avatar_url'],
                      'html_url': repo['html_url'],
                      'repos_url': repo['owner']['repos_url'],
                      'type': repo['owner']['type'],
                      'number_of_skills': number_of_skills,
                      'skills_in_market': skills_in_market}
            skill_auhtor[repo['owner']['login']] = auhtor

    page = page+1
    print(page)
print(count)

skills_file = open('skills.json', 'w')
skills_file.write(json.dumps(skills))
skills_file.close()
auhtor_file = open('auhtor.json', 'w')
auhtor_file.write(json.dumps(skill_auhtor))
auhtor_file.close()

